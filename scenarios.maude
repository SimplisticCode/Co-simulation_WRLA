*** This file contains different scenarios test the implemented model in file WRLA.maude:
load WRLA

(omod ScenarioTest is
    protecting AlgorithmVerifier .

  vars SUs CONNECTIONS CONF SCENARIOMODEL : Configuration .
  vars NATVALUE HIGH LOW WATERLEVEL WATERLEVELOUT VALVESTATE TIME : Nat .
  var PORTSTATUS : PortStatus .
  var LOOPS : AlgebraicLoopSet .
  var BOOLVALUE : Bool .
  var STEPSIZE : NzNat .
  var NeSUIDs : NeOidSet .

  *** Definition of the scenario
  *** External Connections - all ports have unique name
  op externalConnection : ->  Configuration .    
  ops simulationUnitsNotInstrumented simulationUnits : -> Configuration .      *** SUs - ID * input ports * and outputs
  op simulationUnitsNotInitialized : -> [Configuration] .

eq externalConnection = ("tank" ! "waterlevel" ==> "ctrl" ! "waterlevel") ("ctrl" ! "valveState" ==> "tank" ! "valveState") .

eq simulationUnits =   (< "tank" : SU | path : "", parameters : ("flow" |-> < 100 >), localState : ( "waterlevel" |-> < 0 > ) , time : 0, inputs : (< "valveState" : Input | value : < 0 >, type : integer, time : 0, contract : delayed, status : Undef  >), outputs : (< "waterlevel" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >)

  (< "ctrl" : SU | path : "", parameters : (("high" |-> < 5 >) , ("low" |-> < 0 >)), localState : ( "valve" |-> < false >), time : 0, inputs : (< "waterlevel" : Input | value : < 0 >, type : integer, time : 0, contract : delayed, status : Undef  >), outputs : (< "valveState" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >) .

eq simulationUnitsNotInstrumented = 
  (< "tank" : SU | path : "", parameters : ("flow" |-> < 100 >), localState : ( "waterlevel" |-> < 0 > ) , time : 0, inputs : (< "valveState" : Input | value : < 0 >, type : integer, time : 0, contract : noContract, status : Undef  >), outputs : (< "waterlevel" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >)

  (< "ctrl" : SU | path : "", parameters : (("high" |-> < 5 >) , ("low" |-> < 0 >)), localState : ( "valve" |-> < false > ), time : 0, inputs : (< "waterlevel" : Input | value : < 0 >, type : integer, time : 0, contract : noContract, status : Undef  >), outputs : (< "valveState" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >) .

eq simulationUnitsNotInitialized =  
  (< "tank" : SU | path : "", parameters : ("flow" |-> choose((< 1 >,< 2 >,< 30 >))), localState : ( "waterlevel" |-> < 0 > ) , time : 0, inputs : (< "valveState" : Input | value : < 0 >, type : integer, time : 0, contract : delayed, status : Undef  >), outputs : (< "waterlevel" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >)

  (< "ctrl" : SU | path : "", parameters : (("high" |-> choose((< 20 >))) , ("low" |-> < 0 >)), localState : ( "valve" |-> < false >), time : 0, inputs : (< "waterlevel" : Input | value : < 0 >, type : integer, time : 0, contract : delayed, status : Undef  >), outputs : (< "valveState" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >) .

*** COULD be Stream lined
*** Todo make Dostep for the different SUs
eq step(< "ctrl" : SU | time : TIME, parameters : (("high" |-> < HIGH >) , ("low" |-> < LOW >)), 
                      inputs : < "waterlevel" : Input | value : < NATVALUE > >, 
                      outputs : < "valveState" : Output | value : < VALVESTATE >, time : TIME, status : PORTSTATUS >,
                      localState : ( "valve" |-> < BOOLVALUE > ) >,
                      STEPSIZE) = 
  if NATVALUE > HIGH then
    < "ctrl" : SU | time : (TIME + STEPSIZE), localState : ( "valve" |-> < true > ), 
          outputs : < "valveState" : Output | value : < 1 >, time : (TIME + STEPSIZE), status : Undef > >
    else 
    if NATVALUE < LOW then
      < "ctrl" : SU | time : (TIME + STEPSIZE), localState : ( "valve" |-> < false > ), 
          outputs : < "valveState" : Output | value : < 0 >, time : (TIME + STEPSIZE), status : Undef > >
    else
      < "ctrl" : SU | time : (TIME + STEPSIZE), 
                outputs : < "valveState" : Output | time : (TIME + STEPSIZE), status : Undef > >
  fi
fi .

eq step(< "tank" : SU | time : TIME, parameters : ("flow" |-> < NATVALUE >), 
                      inputs : < "valveState" : Input | value : < VALVESTATE > >, 
                      outputs : < "waterlevel" : Output | value : < WATERLEVELOUT >, time : TIME, status : PORTSTATUS >,
                      localState : ( "waterlevel" |-> < WATERLEVEL > ) >,
                      STEPSIZE) = 
  if VALVESTATE == 1 then 
    *** Open goes to zero
      < "tank" : SU | time : (TIME + STEPSIZE), localState : ( "waterlevel" |-> < 0 > ),
          outputs : < "waterlevel" : Output | value : < 0 >, time : (TIME + STEPSIZE), status : Undef > >
    else 
      < "tank" : SU | time : (TIME + STEPSIZE), localState : ( "waterlevel" |-> < WATERLEVEL + (STEPSIZE * NATVALUE) > ), outputs : < "waterlevel" : Output | value : < WATERLEVEL + (STEPSIZE * NATVALUE) >, time : (TIME + STEPSIZE), status : Undef > > 
  fi .

  ceq scenario(CONNECTIONS, SUs) = CONNECTIONS SUs 
    if validScenario(CONNECTIONS, SUs) .

  eq scenario(CONNECTIONS, SUs) = none [owise] .

  ceq setup = { CONF }
    if SCENARIOMODEL := scenario(externalConnection, simulationUnits)
    /\ LOOPS := tarjan(SCENARIOMODEL)
    /\ NeSUIDs := getSUIDsOfScenario(SCENARIOMODEL)
    /\ CONF := calculateSNSet(SCENARIOMODEL initialOrchestrationData(1,LOOPS, NeSUIDs)) .
    

  op init : -> GlobalState .
  eq init = { scenario(externalConnection, simulationUnits) } .

  ops initConfiguration initConfigurationUninstrumented initConfDSE : -> Configuration .
  eq initConfiguration = scenario(externalConnection, simulationUnits) .
  eq initConfigurationUninstrumented = scenario(externalConnection, simulationUnitsNotInstrumented) .
  eq initConfDSE = externalConnection simulationUnitsNotInitialized .

endom)

eof
*** Search Commands


*** find Instrumentations
( search findContracts(initConfiguration) =>! C:Configuration . )

( search findContracts(initConfigurationUninstrumented) =>! C:Configuration . )

*** Find correct Parameters:
( search selectParams(initConfDSE)  =>! C:Configuration . )

*** Run any algorithm - to show confluence
( search (runAnyAlgorithm initConfiguration)  =>! S:SimulationState . )
( search (runAnyAlgorithm initConfDSE)  =>! S:SimulationState . )

*** Search for bad states - safety properties
( search (runAnyAlgorithm initConfiguration) =>* run: O:Object on: (C:Configuration 
                < "tank" : SU | outputs : < "waterlevel" : Output | value : < 100 > > > ) . )


              